import{_ as t,a as e,b as a,c as n,d as s,e as o,f as i}from"./chunks/pic-uds-0005.PKixka0W.js";import{_ as p,c as l,o as r,a2 as c}from"./chunks/framework.C94oF1kp.js";const C=JSON.parse('{"title":"Academic Tutoring","description":"","frontmatter":{},"headers":[],"relativePath":"en/usage/academic-tutoring.md","filePath":"en/usage/academic-tutoring.md","lastUpdated":1724429050000}'),d={name:"en/usage/academic-tutoring.md"},u=c(`<h1 id="academic-tutoring" tabindex="-1">Academic Tutoring <a class="header-anchor" href="#academic-tutoring" aria-label="Permalink to &quot;Academic Tutoring {#academic-tutoring}&quot;">​</a></h1><p>This section mainly demonstrates two parts:</p><ol><li>Summarizing input content such as documents</li><li>Generating output for writing tasks</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The input and output are not limited to text documents; they can be in any of the following formats:</p><p><code>.docx</code> <code>.pdf</code> <code>.xlsx</code> <code>.html</code> <code>.md</code> <code>.py</code> and other formats.</p></div><h2 id="summarizing-input-content" tabindex="-1">Summarizing Input Content <a class="header-anchor" href="#summarizing-input-content" aria-label="Permalink to &quot;Summarizing Input Content&quot;">​</a></h2><p>We offer three methods for input:</p><ol><li>Place the target document in the desktop directory and ask using the first format.</li><li>Drag the document in and ask using the second format.</li><li>If you want to summarize content from a webpage, use the third format.</li></ol><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. “Help me summarize the document on the desktop: example.pdf.”</span></span>
<span class="line"><span>2. “Help me summarize the document I gave you.”</span></span>
<span class="line"><span>3. “Help me summarize the content on the website https://github.com/trending.”</span></span></code></pre></div><ul><li><strong>Response 1</strong></li></ul><p><img src="`+t+'" alt="Example 1" title="Example 1"></p><ul><li><strong>Response 2</strong></li></ul><p>⚠️ In development...</p><ul><li><strong>Response 3</strong></li></ul><p><img src="'+e+'" alt="Example 3-1" title="Example 3-1"></p><p>Further inquiry:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>“What content is related to deep learning?”</span></span></code></pre></div><p><img src="'+a+`" alt="Example 3-2" title="Example 3-2"></p><h2 id="content-output" tabindex="-1">Content Output <a class="header-anchor" href="#content-output" aria-label="Permalink to &quot;Content Output {#content-output}&quot;">​</a></h2><p>We also provide two approaches:</p><ol><li>Generate content based on the requirements in a specific file.</li><li>Display the target content on the screen and ask the assistant to generate content based on what is shown.</li></ol><p>The specific input is as follows:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. “Based on the paper example.pdf on the desktop, help me write an English report and save it to the desktop.”</span></span>
<span class="line"><span>2. “Help me write a simple English summary based on the content displayed on the screen and save it to the desktop.”</span></span></code></pre></div><h3 id="file-based-content-output" tabindex="-1">File-Based Content Output <a class="header-anchor" href="#file-based-content-output" aria-label="Permalink to &quot;File-Based Content Output&quot;">​</a></h3><p>We can see that ChatMate first generates complete text content in the chat box according to the requirements. After the generation is complete, it automatically saves the generated content as a document.</p><ul><li><strong>Generation Process</strong></li></ul><p><img src="`+n+'" alt="Example 4-1" title="Example 4-1"></p><ul><li><strong>Generation Complete and Document Saved</strong></li></ul><p><img src="'+s+'" alt="Example 4-2" title="Example 4-2"></p><ul><li><strong>Saving the Document</strong></li></ul><p><img src="'+o+'" alt="Example 4-3" title="Example 4-3"></p><h3 id="screen-based-content-output" tabindex="-1">Screen-Based Content Output <a class="header-anchor" href="#screen-based-content-output" aria-label="Permalink to &quot;Screen-Based Content Output&quot;">​</a></h3><p>Here, I assumed a scenario where I was attending a class. At that moment, my computer had the course material from the teacher open, but I didn’t fully understand it. So I asked the assistant, “Help me understand the content in the PPT.”</p><p>The output is as follows:</p><p><img src="'+i+'" alt="Example 5-1" title="Example 5-1"></p>',34),m=[u];function h(g,f,_,b,x,k){return r(),l("div",null,m)}const E=p(d,[["render",h]]);export{C as __pageData,E as default};
